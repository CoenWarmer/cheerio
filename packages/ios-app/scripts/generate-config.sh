#!/bin/bash

# Script to generate Config.swift from web-app/.env.local
# This runs during Xcode build phase

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Paths
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
IOS_APP_DIR="$(dirname "$SCRIPT_DIR")"
REPO_ROOT="$(dirname "$(dirname "$IOS_APP_DIR")")"
OUTPUT_FILE="$IOS_APP_DIR/CheeriooApp/Config.swift"

# Try to find .env.local in multiple locations (preference order)
ENV_FILE=""
if [ -f "$REPO_ROOT/.env.local" ]; then
    ENV_FILE="$REPO_ROOT/.env.local"
    echo "📝 Generating Config.swift from .env.local (repo root)..."
elif [ -f "$IOS_APP_DIR/../web-app/.env.local" ]; then
    ENV_FILE="$IOS_APP_DIR/../web-app/.env.local"
    echo "📝 Generating Config.swift from .env.local (web-app)..."
else
    echo -e "${RED}❌ Error: .env.local not found${NC}"
    echo -e "${YELLOW}💡 Create .env.local in one of these locations:${NC}"
    echo -e "${YELLOW}   - $REPO_ROOT/.env.local (recommended)${NC}"
    echo -e "${YELLOW}   - $IOS_APP_DIR/../web-app/.env.local${NC}"
    echo -e "${YELLOW}   Copy from packages/web-app/env.local.example${NC}"
    exit 1
fi

# Read environment variables
source "$ENV_FILE"

# Validate required variables
if [ -z "$NEXT_PUBLIC_SUPABASE_URL" ] || [ -z "$NEXT_PUBLIC_SUPABASE_ANON_KEY" ]; then
    echo -e "${RED}❌ Error: Missing required environment variables${NC}"
    echo -e "${YELLOW}Required: NEXT_PUBLIC_SUPABASE_URL, NEXT_PUBLIC_SUPABASE_ANON_KEY${NC}"
    exit 1
fi

# Detect current machine's IP address for device builds
LOCAL_IP=$(ipconfig getifaddr en0 2>/dev/null || ipconfig getifaddr en1 2>/dev/null || echo "localhost")

# Optional variables with defaults
API_PORT="${API_PORT:-3001}"
THUNDERFOREST_API_KEY="${NEXT_PUBLIC_THUNDERFOREST_API_KEY:-}"

# Generate Config.swift
cat > "$OUTPUT_FILE" << EOF
//
// Config.swift
// CheeriooApp
//
// Auto-generated from .env.local
// DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten
// Run: scripts/generate-config.sh to regenerate
//

import Foundation

struct Config {
    // Supabase Configuration
    // Generated from: NEXT_PUBLIC_SUPABASE_URL
    static let supabaseURL = "$NEXT_PUBLIC_SUPABASE_URL"
    
    // Generated from: NEXT_PUBLIC_SUPABASE_ANON_KEY
    static let supabaseAnonKey = "$NEXT_PUBLIC_SUPABASE_ANON_KEY"
    
    // Base URL for Next.js API routes
    // Automatically detects simulator vs device
    static let apiBaseURL: String = {
        #if targetEnvironment(simulator)
            // Simulator can use localhost
            return "http://localhost:$API_PORT"
        #else
            // Device needs your Mac's IP address on the local network
            // Auto-detected IP: $LOCAL_IP
            return "http://$LOCAL_IP:$API_PORT"
        #endif
    }()
    
    // Optional: Thunderforest API key for map tiles
    static let thunderforestAPIKey: String? = $([ -n "$THUNDERFOREST_API_KEY" ] && echo "\"$THUNDERFOREST_API_KEY\"" || echo "nil")
    
    // Helper property to check if running on simulator
    static var isSimulator: Bool {
        #if targetEnvironment(simulator)
            return true
        #else
            return false
        #endif
    }
    
    // Build information
    static let generatedAt = "$(date -u +"%Y-%m-%d %H:%M:%S UTC")"
    static let localIP = "$LOCAL_IP"
}
EOF

echo -e "${GREEN}✅ Config.swift generated successfully!${NC}"
echo "   Source: $ENV_FILE"
echo "   Supabase URL: $NEXT_PUBLIC_SUPABASE_URL"
echo "   Local IP: $LOCAL_IP"
echo "   Output: $OUTPUT_FILE"
